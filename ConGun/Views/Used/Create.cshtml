@model BusinessAccessLayer.UsedModel

@{
    ViewBag.Title = "Post your Equipment";
}


<script type="text/javascript">

    $(document).ready(function () {
        $("#EquipmentTypeOption").addClass("CustomDropDown");

        $("#EquipmentTypeOption").on("change", function () {
            $("#hdnEquipmentTypeSelected").val($("#EquipmentTypeOption").val());
        });
    });

    function validateImageCount(){
        var $fileUpload = $("input[type='file']");
        if (parseInt($fileUpload.get(0).files.length) > 5) {
            alert("You can only upload a maximum of 5 files");
            return false;
        }
        else if(parseInt($fileUpload.get(0).files.length) == 0){
            alert("Please selec atleast one image to upload.");
            return false;
        }
        else {
            return true;
        }
    }


    function DisplayUserFields(IsDisplay) {
        $("#divUserFields").css("display", IsDisplay);
        return false;
    }

    function ValidateUserFields() {
        if ($("#Make").val() != "" && $("#ModelNumber").val() != "" && $("#Readings").val() != "" && $("#ContactNumber").val() != "" && $("#Email").val() != "" &&
            $("#Price").val() != "" && $("#Location").val() != "" && $("#Comments").val() != "") {
            if ($("#UserName").val() == "" && $("#Password").val() == "") {
                alert("Please provide UserName and Password");
                return false;
            }
            else {
                return true;
            }
        }
    }

    function ValidateEquipmentDropDown() {
        var equipmentTypeVal = $("#hdnEquipmentTypeSelected").val();
        if (equipmentTypeVal != undefined && equipmentTypeVal == "") {
            alert("please select Equipment Type.");
            return false;
        }
        else {
            if (validateImageCount()) {
                return true;
            }
            else {
                return false;
            }
        }
    }
</script>



@using (Html.BeginForm("Create", "Used", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h3>Add your Equipment</h3>
            </div>
            <div class="col-sm-6 col-sm-offset-3 col-xs-12">
                <div class="form-horizontal">
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.EquipmentType, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("EquipmentTypeOption", "-- Select --")
                            @Html.HiddenFor(m => m.EquipmentType, new { @id = "hdnEquipmentTypeSelected" })
                            @Html.ValidationMessageFor(model => model.EquipmentType)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ModelNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ModelNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModelNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Readings, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Readings, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Readings, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ContactNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ContactNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EmailID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EmailID, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EmailID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @*@Html.EditorFor(model => model.ImagePath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ImagePath, "", new { @class = "text-danger" })*@
                            <input type="file" name="file_Uploader" multiple accept="image/*" />
                            <span style="color:red;">* Note: A maximum of 5 images can be uploaded.</span>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div id="divUserFields" style="display:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Post As Guest" class="btn btn-primary" onclick="return ValidateEquipmentDropDown();" />
                            @*<input type="submit" value="Post As Congun User" class="btn btn-success" onclick="DisplayUserFields('block'); ValidateUserFields();" />*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
   
}

<div>
    @Html.ActionLink("Back to List", "List")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
}
